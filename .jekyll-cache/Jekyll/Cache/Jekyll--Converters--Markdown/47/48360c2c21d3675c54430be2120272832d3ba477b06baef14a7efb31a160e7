I"4R<p><img src="/assets/imgs/2021/11/09/tailwindcss-logotype.png" alt="cat" /></p>

<p><a href="https://play.tailwindcss.com/">tailwindcss 在线练习</a></p>

<h1 id="flex在css如何定义">Flex在css如何定义</h1>

<h2 id="一flex布局是什么">一、Flex布局是什么？</h2>

<p>在学习使用<code class="language-plaintext highlighter-rouge">flex</code>之前，先看看文档是怎么解释<code class="language-plaintext highlighter-rouge">flex</code>的。</p>

<p><code class="language-plaintext highlighter-rouge">flex</code></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">flex</code>是<code class="language-plaintext highlighter-rouge">display</code>中的一个属性，是<code class="language-plaintext highlighter-rouge">Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>

  <p>任何一个容器都可以指定为Flex布局。</p>

  <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span><span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>  </div>

  <p>行内元素也可以使用Flex布局。</p>

  <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span><span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>  </div>

  <p>Webkit内核的浏览器，必须加上-webkit前缀。</p>

  <div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span><span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">-webkit-flex</span><span class="p">;</span> <span class="c">/* Safari */</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>  </div>

</blockquote>

<p>设为Flex布局以后，子元素的<code class="language-plaintext highlighter-rouge">float</code>、<code class="language-plaintext highlighter-rouge">clear</code>和<code class="language-plaintext highlighter-rouge">vertical-align</code>属性将失效。</p>

<h2 id="二基本概念">二、基本概念</h2>

<p>采用Flex布局的元素，称为Flex容器（<code class="language-plaintext highlighter-rouge">flex container</code>），简称”容器”。</p>

<p>它的所有子元素自动成为容器成员，称为Flex项目（<code class="language-plaintext highlighter-rouge">flex item</code>），简称”项目”。</p>

<p><img src="/assets/imgs/2021/11/09/flex1.png" alt="cat" /></p>

<p>容器默认存在两根轴：水平的主轴（<code class="language-plaintext highlighter-rouge">main axis</code>）和垂直的交叉轴（<code class="language-plaintext highlighter-rouge">cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code class="language-plaintext highlighter-rouge">main start</code>，结束位置叫做<code class="language-plaintext highlighter-rouge">main end</code>；交叉轴的开始位置叫做<code class="language-plaintext highlighter-rouge">cross start</code>，结束位置叫做<code class="language-plaintext highlighter-rouge">cross end</code>。</p>

<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code class="language-plaintext highlighter-rouge">main size</code>，占据的交叉轴空间叫做<code class="language-plaintext highlighter-rouge">cross size</code>。</p>

<h2 id="三容器的属性">三、容器的属性</h2>

<p>以下6个属性设置在容器上。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">flex-direction</code></li>
  <li><code class="language-plaintext highlighter-rouge">flex-wrap</code></li>
  <li><code class="language-plaintext highlighter-rouge">flex-flow</code></li>
  <li><code class="language-plaintext highlighter-rouge">justify-content</code></li>
  <li><code class="language-plaintext highlighter-rouge">align-items</code></li>
  <li><code class="language-plaintext highlighter-rouge">align-content</code></li>
</ul>

<h3 id="31-flex-direction属性">3.1 <code class="language-plaintext highlighter-rouge">flex-direction</code>属性</h3>

<p>flex-direction属性决定主轴的方向（即项目的排列方向）。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">flex-direction</span><span class="p">:</span> <span class="n">row</span> <span class="err">|</span> <span class="n">row-reverse</span> <span class="err">|</span> <span class="n">column</span> <span class="err">|</span> <span class="n">column-reverse</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/imgs/2021/11/09/direction.png" alt="cat" /></p>

<p>它可能有4个值。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">row</code>（默认值）：主轴为水平方向，起点在左端。</li>
  <li><code class="language-plaintext highlighter-rouge">row-reverse</code>：主轴为水平方向，起点在右端。</li>
  <li><code class="language-plaintext highlighter-rouge">column</code>：主轴为垂直方向，起点在上沿。</li>
  <li><code class="language-plaintext highlighter-rouge">column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
</ul>

<h3 id="32-flex-wrap属性">3.2 <code class="language-plaintext highlighter-rouge">flex-wrap</code>属性</h3>

<p>默认情况下，项目都排在一条线（又称”轴线”）上。<code class="language-plaintext highlighter-rouge">flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>

<p><img src="/assets/imgs/2021/11/09/wrap.png" alt="cat" /></p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span><span class="p">{</span>
  <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">nowrap</span> <span class="err">|</span> <span class="n">wrap</span> <span class="err">|</span> <span class="n">wrap-reverse</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>它可能取三个值。</p>

<p>（1）<code class="language-plaintext highlighter-rouge">nowrap</code>（默认）：不换行。</p>

<p><img src="/assets/imgs/2021/11/09/nowrap.png" alt="cat" /></p>

<p>（2）wrap：换行，第一行在上方。</p>

<p><img src="/assets/imgs/2021/11/09/wrap2.jpeg" alt="cat" /></p>

<p>（3）wrap-reverse：换行，第一行在下方。</p>

<p><img src="/assets/imgs/2021/11/09/wrap-reverse.jpeg" alt="cat" /></p>

<h3 id="33-flex-flow">3.3 <code class="language-plaintext highlighter-rouge">flex-flow</code></h3>

<p><code class="language-plaintext highlighter-rouge">flex-flow</code>属性是<code class="language-plaintext highlighter-rouge">flex-direction</code>属性和<code class="language-plaintext highlighter-rouge">flex-wrap</code>属性的简写形式，默认值为<code class="language-plaintext highlighter-rouge">row nowrap</code>。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">flex-flow</span><span class="p">:</span> <span class="err">&lt;</span><span class="n">flex-direction</span><span class="err">&gt;</span> <span class="err">&lt;</span><span class="n">flex-wrap</span><span class="err">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="34-justify-content属性">3.4 justify-content属性</h3>

<p>justify-content属性定义了项目在主轴上的对齐方式。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">justify-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="err">|</span> <span class="n">flex-end</span> <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="n">space-between</span> <span class="err">|</span> <span class="n">space-around</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/justify-content.png" alt="cat" /></p>

<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>

<ul>
  <li>flex-start（默认值）：左对齐</li>
  <li>flex-end：右对齐</li>
  <li>center： 居中</li>
  <li>space-between：两端对齐，项目之间的间隔都相等。</li>
  <li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>

<h3 id="35-align-items属性">3.5 align-items属性</h3>

<p>align-items属性定义项目在交叉轴上如何对齐。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">align-items</span><span class="p">:</span> <span class="n">flex-start</span> <span class="err">|</span> <span class="n">flex-end</span> <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="nb">baseline</span> <span class="err">|</span> <span class="n">stretch</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/align-items.png" alt="cat" /></p>

<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>

<ul>
  <li>flex-start：交叉轴的起点对齐。</li>
  <li>flex-end：交叉轴的终点对齐。</li>
  <li>center：交叉轴的中点对齐。</li>
  <li>baseline: 项目的第一行文字的基线对齐。</li>
  <li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>

<h3 id="36-align-content属性">3.6 align-content属性</h3>

<p>align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.box</span> <span class="p">{</span>
  <span class="nl">align-content</span><span class="p">:</span> <span class="n">flex-start</span> <span class="err">|</span> <span class="n">flex-end</span> <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="n">space-between</span> <span class="err">|</span> <span class="n">space-around</span> <span class="err">|</span> <span class="n">stretch</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/align-content.png" alt="cat" /></p>

<p>该属性可能取6个值。</p>

<ul>
  <li>flex-start：与交叉轴的起点对齐。</li>
  <li>flex-end：与交叉轴的终点对齐。</li>
  <li>center：与交叉轴的中点对齐。</li>
  <li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
  <li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
  <li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>

<h3 id="四项目的属性">四、项目的属性</h3>

<p>以下6个属性设置在项目上。</p>

<ul>
  <li>order</li>
  <li>flex-grow</li>
  <li>flex-shrink</li>
  <li>flex-basis</li>
  <li>flex</li>
  <li>align-self</li>
</ul>

<h3 id="41-order属性">4.1 order属性</h3>

<p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">order</span><span class="p">:</span> <span class="err">&lt;</span><span class="n">integer</span><span class="err">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/order.png" alt="cat" /></p>

<h3 id="42-flex-grow属性">4.2 flex-grow属性</h3>

<p>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-grow</span><span class="p">:</span> <span class="err">&lt;</span><span class="n">number</span><span class="err">&gt;</span><span class="p">;</span> <span class="c">/* default 0 */</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/flex-grow.png" alt="cat" /></p>

<p>如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>

<h3 id="43-flex-shrink属性">4.3 flex-shrink属性</h3>

<p>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-shrink</span><span class="p">:</span> <span class="err">&lt;</span><span class="n">number</span><span class="err">&gt;</span><span class="p">;</span> <span class="c">/* default 1 */</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/flex-shrink.jpeg" alt="cat" /></p>

<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>

<p>负值对该属性无效。</p>

<h3 id="44-flex-basis属性">4.4 flex-basis属性</h3>

<p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex-basis</span><span class="p">:</span> <span class="err">&lt;</span><span class="n">length</span><span class="err">&gt;</span> <span class="err">|</span> <span class="nb">auto</span><span class="p">;</span> <span class="c">/* default auto */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</p>

<h3 id="45-flex属性">4.5 flex属性</h3>

<p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">flex</span><span class="p">:</span> <span class="nb">none</span> <span class="err">|</span> <span class="p">[</span> <span class="err">&lt;</span><span class="s2">'flex-grow'</span><span class="err">&gt;</span> <span class="err">&lt;</span><span class="s2">'flex-shrink'</span><span class="err">&gt;?</span> <span class="err">||</span> <span class="err">&lt;</span><span class="s2">'flex-basis'</span><span class="err">&gt;</span> <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p>

<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>

<h3 id="46-align-self属性">4.6 align-self属性</h3>

<p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">align-self</span><span class="p">:</span> <span class="nb">auto</span> <span class="err">|</span> <span class="n">flex-start</span> <span class="err">|</span> <span class="n">flex-end</span> <span class="err">|</span> <span class="nb">center</span> <span class="err">|</span> <span class="nb">baseline</span> <span class="err">|</span> <span class="n">stretch</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p><img src="/assets/imgs/2021/11/09/align-self.png" alt="cat" /></p>

<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>

<h1 id="flex在tailwind中使用举例">Flex在tailwind中使用举例</h1>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>两端对齐均匀分布：justify-between
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
垂直居中：flex-wrap content-center
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bg-green-300 h-20 w-full flex justify-between flex-wrap content-center"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-yellow-400 text-center px-4"</span><span class="nt">&gt;</span>left<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-red-400 text-center px-4"</span><span class="nt">&gt;</span>center<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-blue-400 text-center px-4"</span><span class="nt">&gt;</span>right<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
使每个项目周围的距离相等，但不像使用 justify-around 时项目之间有双倍的距离：justify-evenly
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
顶端对齐：items-start
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bg-green-300 h-20 w-full flex justify-evenly items-start"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-yellow-400 text-center px-4 py-2"</span><span class="nt">&gt;</span>left<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-red-400 text-center px-4 py-5"</span><span class="nt">&gt;</span>center<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-blue-400 text-center px-4 py-1"</span><span class="nt">&gt;</span>right<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
使每个项目两侧的距离相等：justify-around
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
底端对齐：items-start
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"bg-green-300 h-20 w-full flex justify-around items-end"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-yellow-400 text-center px-4 py-2"</span><span class="nt">&gt;</span>left<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-red-400 text-center px-4 py-5"</span><span class="nt">&gt;</span>center<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"w-max bg-blue-400 text-center px-4 py-1"</span><span class="nt">&gt;</span>right<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
x方向布局：<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
justify-start / justify-end / justify-center / justify-between / justify-around / justify-evenly
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
y方向布局：多行控制需要使用flex-wrap
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
在容器中行的位置：content-center / content-start / content-end / content-between / content-around
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
content-evenly
<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p><img src="/assets/imgs/2021/11/09/flex-1.png" alt="cat" /></p>
:ET